// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesAndReturnSystem.DAL;

#nullable disable

namespace eBikeManagmentWebApp.Migrations
{
    [DbContext(typeof(SalesAndReturnContext))]
    [Migration("20240417144941_initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("CategoryID")
                        .HasName("PK_Categories_CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponID"));

                    b.Property<int>("CouponDiscount")
                        .HasColumnType("int");

                    b.Property<string>("CouponIDValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SalesOrService")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("CouponID")
                        .HasName("PK_Coupons_CouponID");

                    b.HasIndex(new[] { "CouponIDValue" }, "UQ_Coupons_CouponIDValue")
                        .IsUnique();

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .IsFixedLength();

                    b.Property<string>("Province")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<bool>("Textable")
                        .HasColumnType("bit");

                    b.HasKey("CustomerID")
                        .HasName("PK_Customers_CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.CustomerVehicle", b =>
                {
                    b.Property<string>("VehicleIdentification")
                        .HasMaxLength(13)
                        .HasColumnType("nchar(13)")
                        .IsFixedLength();

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.HasKey("VehicleIdentification")
                        .HasName("PK_CustomerVehicles_VehicleIdentification");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.DatabaseVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Build")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Database__3214EC07CD6BBDD7");

                    b.ToTable("DatabaseVersion");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Address")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .IsFixedLength();

                    b.Property<string>("Province")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("SocialInsuranceNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<bool>("Textable")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeID")
                        .HasName("PK_Employees_EmployeeID");

                    b.HasIndex("PositionID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JobDateDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("JobDateIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("JobDateOut")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("JobDateStarted")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ShopRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("VehicleIdentification")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nchar(13)")
                        .IsFixedLength();

                    b.HasKey("JobID")
                        .HasName("PK_Jobs_JobID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("VehicleIdentification");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.JobDetail", b =>
                {
                    b.Property<int>("JobDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobDetailID"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CouponID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal>("JobHours")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("I")
                        .IsFixedLength();

                    b.HasKey("JobDetailID")
                        .HasName("PK_JobDetails_JobDetailID");

                    b.HasIndex("CouponID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("JobID");

                    b.ToTable("JobDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.JobDetailPart", b =>
                {
                    b.Property<int>("JobDetailPartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobDetailPartID"));

                    b.Property<int>("JobDetailID")
                        .HasColumnType("int");

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("smallmoney");

                    b.HasKey("JobDetailPartID")
                        .HasName("PK_JobDetailParts_JobPartDetailsID");

                    b.HasIndex("JobDetailID");

                    b.HasIndex("PartID");

                    b.ToTable("JobDetailParts");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("smallmoney");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOnOrder")
                        .HasColumnType("int");

                    b.Property<string>("Refundable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("Y")
                        .IsFixedLength();

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("smallmoney");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("PartID")
                        .HasName("PK_Parts_PartID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("VendorID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("PositionID")
                        .HasName("PK_Positions_PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderID"));

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PurchaseOrderNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderID")
                        .HasName("PK_PurchaseOrders_PurchaseOrderID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("VendorID");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderDetailID"));

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PurchaseOrderDetailID")
                        .HasName("PK_PurchaseOrderDetails_PurchaseOrderDetailID");

                    b.HasIndex("PartID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReceiveOrder", b =>
                {
                    b.Property<int>("ReceiveOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiveOrderID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReceiveOrderID")
                        .HasName("PK_ReceiveOrders_ReceiveOrderID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("ReceiveOrders");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReceiveOrderDetail", b =>
                {
                    b.Property<int>("ReceiveOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiveOrderDetailID"));

                    b.Property<int>("PurchaseOrderDetailID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveOrderID")
                        .HasColumnType("int");

                    b.HasKey("ReceiveOrderDetailID")
                        .HasName("PK_ReceiveOrderDetails_ReceiveOrderDetailID");

                    b.HasIndex("PurchaseOrderDetailID");

                    b.HasIndex("ReceiveOrderID");

                    b.ToTable("ReceiveOrderDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReturnedOrderDetail", b =>
                {
                    b.Property<int>("ReturnedOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnedOrderDetailID"));

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PurchaseOrderDetailID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReceiveOrderID")
                        .HasColumnType("int");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReturnedOrderDetailID")
                        .HasName("PK_ReturnedOrderDetails_ReturnOrderDetailID");

                    b.HasIndex("PurchaseOrderDetailID");

                    b.HasIndex("ReceiveOrderID");

                    b.ToTable("ReturnedOrderDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"));

                    b.Property<int?>("CouponID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money");

                    b.HasKey("SaleID")
                        .HasName("PK_Sales_SaleID");

                    b.HasIndex("CouponID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleDetail", b =>
                {
                    b.Property<int>("SaleDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleDetailID"));

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleID")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("money");

                    b.HasKey("SaleDetailID")
                        .HasName("PK_SaleDetails_SaleDetailID");

                    b.HasIndex("PartID");

                    b.HasIndex(new[] { "SaleID", "PartID" }, "UQ_SaleDetails_SaleIDPartID")
                        .IsUnique();

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleRefund", b =>
                {
                    b.Property<int>("SaleRefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleRefundID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("SaleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleRefundDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money");

                    b.HasKey("SaleRefundID")
                        .HasName("PK_SaleRefunds_SaleRefundID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SaleID");

                    b.ToTable("SaleRefunds");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleRefundDetail", b =>
                {
                    b.Property<int>("SaleRefundDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleRefundDetailID"));

                    b.Property<int>("PartID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SaleRefundID")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("money");

                    b.HasKey("SaleRefundDetailID")
                        .HasName("PK_SaleRefundDetails_SaleRefundDetailID");

                    b.HasIndex("PartID");

                    b.HasIndex(new[] { "SaleRefundID", "PartID" }, "UQ_SaleRefundDetails_SaleRefundIDPartID")
                        .IsUnique();

                    b.ToTable("SaleRefundDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.StandardJob", b =>
                {
                    b.Property<int>("StandardJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandardJobID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("StandardHours")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("StandardJobID")
                        .HasName("PK_StandardJobs_StandardJobID");

                    b.ToTable("StandardJobs");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.UnorderedPurchaseItemCart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VendorPartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CartID")
                        .HasName("PK__Unordere__51BCD7976B0A11B8");

                    b.ToTable("UnorderedPurchaseItemCart");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<string>("ProvinceID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasDefaultValue("AB")
                        .IsFixedLength();

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VendorID")
                        .HasName("PK_Vendors_VendorID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.CustomerVehicle", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerID")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerVehiclesCustomers_CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Employee", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionID")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeesPositions_PositionID");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Job", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Employee", "Employee")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployeeID")
                        .IsRequired()
                        .HasConstraintName("FK_JobsEmployees_EmployeeID");

                    b.HasOne("SalesAndReturnSystem.Entities.CustomerVehicle", "VehicleIdentificationNavigation")
                        .WithMany("Jobs")
                        .HasForeignKey("VehicleIdentification")
                        .IsRequired()
                        .HasConstraintName("FK_JobsCustomerVehicles_VehicleIdentification");

                    b.Navigation("Employee");

                    b.Navigation("VehicleIdentificationNavigation");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.JobDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Coupon", "Coupon")
                        .WithMany("JobDetails")
                        .HasForeignKey("CouponID")
                        .HasConstraintName("FK_JobDetailsCoupons_CouponID");

                    b.HasOne("SalesAndReturnSystem.Entities.Employee", "Employee")
                        .WithMany("JobDetails")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_JobDetailsEmployees_EmployeeID");

                    b.HasOne("SalesAndReturnSystem.Entities.Job", "Job")
                        .WithMany("JobDetails")
                        .HasForeignKey("JobID")
                        .IsRequired()
                        .HasConstraintName("FK_JobDetailsJobs_JobID");

                    b.Navigation("Coupon");

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.JobDetailPart", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.JobDetail", "JobDetail")
                        .WithMany("JobDetailParts")
                        .HasForeignKey("JobDetailID")
                        .IsRequired()
                        .HasConstraintName("FK_JobDetailPartsJobDetails_JobDetailID");

                    b.HasOne("SalesAndReturnSystem.Entities.Part", "Part")
                        .WithMany("JobDetailParts")
                        .HasForeignKey("PartID")
                        .IsRequired()
                        .HasConstraintName("FK_JobDetailPartsParts_PartID");

                    b.Navigation("JobDetail");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Part", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Category", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryID")
                        .IsRequired()
                        .HasConstraintName("FK_PartsCategories_CategoryID");

                    b.HasOne("SalesAndReturnSystem.Entities.Vendor", "Vendor")
                        .WithMany("Parts")
                        .HasForeignKey("VendorID")
                        .IsRequired()
                        .HasConstraintName("FK_PartsVendors_VendorID");

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Employee", "Employee")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EmployeeID")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrdersEmployees_EmployeeID");

                    b.HasOne("SalesAndReturnSystem.Entities.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorID")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrdersVednors_VendorID");

                    b.Navigation("Employee");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Part", "Part")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PartID")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderDetailsParts_PartID");

                    b.HasOne("SalesAndReturnSystem.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderID")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderDetailsPurchaseOrders_PurchaseOrderID");

                    b.Navigation("Part");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReceiveOrder", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ReceiveOrders")
                        .HasForeignKey("PurchaseOrderID")
                        .IsRequired()
                        .HasConstraintName("FK_ReceiveOrdersPurchaseOrders_PurchaseOrderID");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReceiveOrderDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithMany("ReceiveOrderDetails")
                        .HasForeignKey("PurchaseOrderDetailID")
                        .IsRequired()
                        .HasConstraintName("FK_ReceiveOrderDetailsPurchaseOrderDetails_OrderDetailID");

                    b.HasOne("SalesAndReturnSystem.Entities.ReceiveOrder", "ReceiveOrder")
                        .WithMany("ReceiveOrderDetails")
                        .HasForeignKey("ReceiveOrderID")
                        .IsRequired()
                        .HasConstraintName("FK_ReceiveOrderDetailsReceiveOrders_ReceiveOrderID");

                    b.Navigation("PurchaseOrderDetail");

                    b.Navigation("ReceiveOrder");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReturnedOrderDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithMany("ReturnedOrderDetails")
                        .HasForeignKey("PurchaseOrderDetailID")
                        .HasConstraintName("FK_ReturnedOrderDetailsPurchaseOrderDetails_OrderDetailID");

                    b.HasOne("SalesAndReturnSystem.Entities.ReceiveOrder", "ReceiveOrder")
                        .WithMany("ReturnedOrderDetails")
                        .HasForeignKey("ReceiveOrderID")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnedOrderDetailsReceiveOrders_ReceiveOrderID");

                    b.Navigation("PurchaseOrderDetail");

                    b.Navigation("ReceiveOrder");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Sale", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Coupon", "Coupon")
                        .WithMany("Sales")
                        .HasForeignKey("CouponID")
                        .HasConstraintName("FK_SalesCoupons_CouponID");

                    b.HasOne("SalesAndReturnSystem.Entities.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeID")
                        .IsRequired()
                        .HasConstraintName("FK_SalesEmployees_EmployeeID");

                    b.Navigation("Coupon");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Part", "Part")
                        .WithMany("SaleDetails")
                        .HasForeignKey("PartID")
                        .IsRequired()
                        .HasConstraintName("FK_SaleDetailsParts_PartID");

                    b.HasOne("SalesAndReturnSystem.Entities.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleID")
                        .IsRequired()
                        .HasConstraintName("FK_SaleDetailsSalesSaleID");

                    b.Navigation("Part");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleRefund", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Employee", "Employee")
                        .WithMany("SaleRefunds")
                        .HasForeignKey("EmployeeID")
                        .IsRequired()
                        .HasConstraintName("FK_SaleRefundsEmployees_EmployeeID");

                    b.HasOne("SalesAndReturnSystem.Entities.Sale", "Sale")
                        .WithMany("SaleRefunds")
                        .HasForeignKey("SaleID")
                        .IsRequired()
                        .HasConstraintName("CK_SaleRefundsSales_SaleID");

                    b.Navigation("Employee");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleRefundDetail", b =>
                {
                    b.HasOne("SalesAndReturnSystem.Entities.Part", "Part")
                        .WithMany("SaleRefundDetails")
                        .HasForeignKey("PartID")
                        .IsRequired()
                        .HasConstraintName("FK_SaleRefundDetailsParts_PartId");

                    b.HasOne("SalesAndReturnSystem.Entities.SaleRefund", "SaleRefund")
                        .WithMany("SaleRefundDetails")
                        .HasForeignKey("SaleRefundID")
                        .IsRequired()
                        .HasConstraintName("FK_SaleRefundDetailsSaleRefunds_SaleRefundID");

                    b.Navigation("Part");

                    b.Navigation("SaleRefund");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Category", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Coupon", b =>
                {
                    b.Navigation("JobDetails");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.CustomerVehicle", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Employee", b =>
                {
                    b.Navigation("JobDetails");

                    b.Navigation("Jobs");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SaleRefunds");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Job", b =>
                {
                    b.Navigation("JobDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.JobDetail", b =>
                {
                    b.Navigation("JobDetailParts");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Part", b =>
                {
                    b.Navigation("JobDetailParts");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("SaleDetails");

                    b.Navigation("SaleRefundDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("ReceiveOrders");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.PurchaseOrderDetail", b =>
                {
                    b.Navigation("ReceiveOrderDetails");

                    b.Navigation("ReturnedOrderDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.ReceiveOrder", b =>
                {
                    b.Navigation("ReceiveOrderDetails");

                    b.Navigation("ReturnedOrderDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Sale", b =>
                {
                    b.Navigation("SaleDetails");

                    b.Navigation("SaleRefunds");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.SaleRefund", b =>
                {
                    b.Navigation("SaleRefundDetails");
                });

            modelBuilder.Entity("SalesAndReturnSystem.Entities.Vendor", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
